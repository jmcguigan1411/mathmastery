I want to build a full-stack web app that teaches mathematics from beginner to advanced levels, with a strong focus on interactive, visual learning, like Brilliant.org.

The app should:
	•	Provide structured math courses (Algebra, Geometry, Trigonometry, Calculus, Probability, Statistics, Linear Algebra, etc.).
	•	Include interactive visual examples, animations, and diagrams to help explain concepts.
	•	Track user progress, mastery level, and time spent on each topic.

⸻

🎯 Core Features

📚 1. Course Module System
	•	Structure the content by difficulty level:
	•	Beginner: Arithmetic, Basic Algebra, Fractions, Ratios
	•	Intermediate: Geometry, Trigonometry, Linear Equations
	•	Advanced: Calculus (Derivatives/Integrals), Linear Algebra, Probability, Statistics
	•	Each course should include:
	•	Short explanations
	•	Worked examples
	•	Practice problems
	•	Interactive visual representations of key ideas (see below)

🎮 2. Interactive Examples & Visualizations
	•	Use canvas or SVG elements to create visual math examples:
	•	Plotting functions and graphs (for algebra/calculus)
	•	Animated geometry problems (drag-and-drop, angle adjustments)
	•	Probability simulations (coin flips, dice, random events)
	•	Matrix transformations (with draggable vectors)
	•	Let users manipulate variables live and observe results.
	•	Add interactive quizzes with hints and explanations.

✅ 3. Progress Tracker
	•	User dashboard with:
	•	Courses enrolled
	•	Topics completed
	•	Quiz scores
	•	Mastery level per subject
	•	Daily streak and time spent
	•	Save user progress using Firebase/Supabase or MongoDB

🧠 4. Smart Quiz Engine
	•	Each course should include:
	•	Multiple-choice and input-based questions
	•	Visual questions (e.g., “What happens when you move this point?”)
	•	Feedback after each question (correct/incorrect with reasoning)
	•	Optional: Adaptive difficulty engine (make future quizzes harder/easier based on performance)

👤 5. User Accounts
	•	Sign-up/login system (via Firebase, Supabase, or Node backend)
	•	Save progress to each user profile
	•	Leaderboards for daily/weekly XP

⸻

🔧 Bonus Features (Optional)
	•	Dark/light mode toggle
	•	“Challenge of the Day” feature with leaderboard
	•	Certificates or badges for completed topics
	•	Mobile-friendly responsive layout
	•	Community forum or discussion under each lesson

⸻

🛠️ Suggested Tech Stack
	•	Frontend: React + TailwindCSS
	•	State Management: Redux or Context API
	•	Backend: Node.js + Express or Firebase
	•	Database: Firestore, Supabase, or MongoDB
	•	Interactive Visuals: D3.js, React-Canvas, SVG, or MathBox
	•	Math Parsing: MathJax, KaTeX for formulas

⸻

✅ Starting Point:
	•	Generate a landing page with course list (Beginner → Advanced)
	•	Build a course viewer page with:
	•	Lesson content
	•	Interactive graph (e.g., plotting y = mx + b)
	•	Quiz with 3–5 questions
	•	User login + saved progress using Firebase